Часть 1. Классы и структуры

Задание 0. Подготовка к работе.

Запустите программу и проверьте ее работоспособность с параметром, меньше 1. 

С параметром больше 1 она не должна работать, это ожидаемое поведение. Мы исправим 
эту ошибку позже.

Задание 1. Рефакторинг с выделением класса

В Data/Photos.cs картинка представлена как набор чисел с плавающей точкой.
data[x,y,c] - это значение канала c (c=0 - красный, c=1 - зеленый, c=2 - синий) пикселя
с координатой x,y. Значение находится в диапазоне от 0 до 1. 

- Почему такое представление - плохое?
- Выделите класс Pixel с полями R,G,B и преобразуйте data к типу Pixel[,]. 
- Проведите рефакторинг, чтобы заработало. Не старайтесь сразу понять всю логику программы, 
  рефакторинг можно выполнить и без этого

Задание 2. Классы и структуры

- замените class Pixel на struct Pixel. Сделайте, чтобы заработало.
- Как изменится логика программы? Какие строки будут лишними? Почему?
- Что больше подходит в данном случае - класс или структура.

Задание 3. Защита целостности - 1

- запустите программу с параметром, большим 1. В чем ошибка? Легко ли это понять?
- какие ограничения целостности в Pixel? Обеспечьте его выполнение. 
- исправьте ошибку из первого пункта

Задание 4. Защита целостности - 2

- какие ограничения целостности в Photo? Обеспечьте их выполнение
- Добавьте к классу Photo индексатор, возвращающий/устанавливающий пиксель 
  по переданным координатам.
- Подумайте, как изменился бы индексатор, если бы Pixel снова поменяли 
  с класса на структуру или наоборот.

Задание 5. Выделение метода

- в классе LighteningFilter выделите метод ProcessPixel, обрабатывающий один пиксель. 
  Метод Process сведите к множественному вызову ProcessPixel.

Задание 6. Модульное тестирование

- создайте модульные тесты, проверяющие корректность работы метода ProcessPixel. 

Задание 7. Операторы

- создайте оператор который бы позволял умножать пиксель на число и наоборот.
- насколько логично создавать оператор в данной ситуации?

Часть 2. Наследование

Задание 1. Реализация интерфейса

- напишите класс GrayscaleFilter, реализующий IFilter. Он должен переводить изображение 
  в черно-белую гамму и не принимать параметров. 
- сделайте так, чтобы этот фильтр появился в окне программы

Задание 2. Выделение базового класса

- посмотрите на GrayscaleFilter и LighteningFilter. Где дублирование кода и функциональности?
- выделите дублирующуюся функциональность в абстрактный базовый класс PixelFilter
  класс реализует IFilter и Process, а ProcessPixel должен получится абстрактным методом.

Задание 3. Большой рефакторинг.

Это задание несколько искусственно. В проекте столь малого размера подобный рефакторинг точно 
не нужен. Однако, это задание даст возможность попрактиковаться в теме интерфейсов и 
классов, а также создаст почву для последующих улучшений.

- создайте интерфейс ISettings с методами 
  ParameterInfo[] GetDesсription(), возвращающим описание настроке
  void Parse(double[]).
- создайте класс LighteningSettings с полем Coefficient, и метод Parse, который бы 
  устанавливал это поле в нулевой значение массива. Аналогично с GrayscaleSettings.
- создайте класс SettableFilter, который бы имел поле ISettings settings, устанавливаемый 
  в конструкторе.
- Метод SettableFilter.GetParameters() перенаправьте на settings.GetDescription()
- сделайте абстрактный метод SettableFilter.Process(ISettings settings)
- В методе SettableFilter.Process(double[]) вызовите settings.Parse и затем Process(settings)
- выведите PixelFilter из SettableFilter и заставьте все заработать




